{
  "ver": "1.0.27",
  "uuid": "88b45a41-9b27-4620-a65b-b8d16d31f463",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_wp;\n void main () {\n   mat4 mvp;\n   mvp = cc_matViewProj;\n   v_color = a_color;\n   gl_Position = mvp * vec4(a_position, 1);\n   v_wp = cc_matWorld * vec4(a_position, 1);\n   v_uv0 = a_uv0;\n }",
        "frag": "\nprecision mediump float;\nuniform sampler2D texture;\nuniform sampler2D noiseTex;\nuniform sampler2D fireTex;\nuniform vec4 color1;\nuniform vec4 color2;\nuniform vec4 color3;\nuniform vec4 speed1;\nuniform vec4 speed2;\nuniform vec4 speed3;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_wp;\nuniform vec4 cc_time;\nvec4 fragFire(vec2 uv,vec4 mc,vec2 move,vec2 offmul){\n  vec4 color = vec4(0.);\n  vec4 tex1 = texture2D(noiseTex, uv * 6. + move);\n  vec2 off = tex1.xy ;\n  off -= .5;\n  vec4 tex3 = texture2D(texture, uv + off * offmul);\n  color.xyz = mc.xyz;\n  color.a = tex3.a;\n  return color;\n}\nvoid main() {\n    vec2 uv;\n    vec4 color;\n    float time = cc_time.x;\n    uv = v_uv0;\n    vec4 f1 = fragFire(uv* .97 + .035,color1,time * speed1.xy,vec2(0.,0.25));\n    vec4 f2 = fragFire(uv* .99 + .025,color2,time * speed2.xy,vec2(0.,0.085));\n    vec4 f3 = fragFire(uv* .99 + .010,color3,time * speed3.xy,vec2(0.,0.085));\n    color = mix(f1,f2,f2.a);\n    color = mix(color,f3,f3.a);\n    float a = f1.a + f2.a + f3.a;\n    vec4 colorfire = vec4(color.xyz,a);\n    vec4 tex = texture2D(texture, v_uv0);\n    gl_FragColor = mix(colorfire,tex,tex.a);\n    gl_FragColor *= v_color;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_wp;\n void main () {\n   mat4 mvp;\n   mvp = cc_matViewProj;\n   v_color = a_color;\n   gl_Position = mvp * vec4(a_position, 1);\n   v_wp = cc_matWorld * vec4(a_position, 1);\n   v_uv0 = a_uv0;\n }",
        "frag": "\nprecision mediump float;\nuniform sampler2D texture;\nuniform sampler2D noiseTex;\nuniform sampler2D fireTex;\nuniform Constants {\n  vec4 color1;\n  vec4 color2;\n  vec4 color3;\n  vec4 speed1;\n  vec4 speed2;\n  vec4 speed3;\n};\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_wp;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nvec4 fragFire(vec2 uv,vec4 mc,vec2 move,vec2 offmul){\n  vec4 color = vec4(0.);\n  vec4 tex1 = texture2D(noiseTex, uv * 6. + move);\n  vec2 off = tex1.xy ;\n  off -= .5;\n  vec4 tex3 = texture2D(texture, uv + off * offmul);\n  color.xyz = mc.xyz;\n  color.a = tex3.a;\n  return color;\n}\nvoid main() {\n    vec2 uv;\n    vec4 color;\n    float time = cc_time.x;\n    uv = v_uv0;\n    vec4 f1 = fragFire(uv* .97 + .035,color1,time * speed1.xy,vec2(0.,0.25));\n    vec4 f2 = fragFire(uv* .99 + .025,color2,time * speed2.xy,vec2(0.,0.085));\n    vec4 f3 = fragFire(uv* .99 + .010,color3,time * speed3.xy,vec2(0.,0.085));\n    color = mix(f1,f2,f2.a);\n    color = mix(color,f3,f3.a);\n    float a = f1.a + f2.a + f3.a;\n    vec4 colorfire = vec4(color.xyz,a);\n    vec4 tex = texture2D(texture, v_uv0);\n    gl_FragColor = mix(colorfire,tex,tex.a);\n    gl_FragColor *= v_color;\n  }"
      }
    }
  ],
  "subMetas": {}
}